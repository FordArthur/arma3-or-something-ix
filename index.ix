(var player-roles {}
     marked-posits {}
     zeros {}
     set-ups {"rifle" ["M4A1" "nrel-287af239-0f76-47b6-ad61-b1333a20bfb7"] "DMR" ["SCARL" "nrel-e8c676d6-23d6-4558-88ac-ebd0ef10e329"] "sniper-cqb" ["Remington700" "nrel-12bffa2e-69b3-41c9-9779-64d3f86f9016"] "machine-gun" ["M4A1" "nrel-5300d077-463b-4d4e-b0be-e110695d16f1"] "SBR" ["M4A1" "nrel-0243f5d0-90c8-48f5-b111-1500891c26cb"] "sniper" ["Remington 700" "nrel-99b0060a-c94e-4b1b-beda-3ad0fd775248"]}
     claymores []
     prefix "/") ; set your prefix here

(function change-role who role
    (when ((str "dl.players." who ".is_alive")) (return (dl.util.fmessage "you can't change roles while you are alive!")))
    (unless (["support" "grenadier" "squad-leader"] role) (return (dl.util.fmessage "provide a valid role name!")))
    (var! player-roles (assoc who role)))

(function help on
    (when on (dl.util.fmessage "Gives you access to:"))
    (match on
           "support" "fill name => fills your ammo or to someone \nheal name => heals you ammo or someone \nget weapon => gives you one of the weapons preconfigured (by default, there's \"sniper\", \"sniper-cqb\", \"DMR\", \"SBR\", \"machine-gun\" and \"rifle\")"
           "grenadier" "shoot => shoots an RPG in your direction \naim number => how far the proyectile goes (75+ is the safe distance) \nplant => plants a claymore (takes 10s to arm)")
           "squad-leader" "mark acronym => marks your position as a target position for drone strikes \nreveal acronym => reveals the position of an acronym \ndrone acronym => bombs the position associated with said acronym"
           "use /role to change your role, and use /help role to see what said role gives you\roles: support, grenadier, squad-leader")

(function disperse-times t dispers vec3 
  (repeat (map + (repeat #(rand (-  dispers) dispers) 3) vec3) t))

(function shoot-proyectile evar mult
  (let pos ("position" evar) 
       tar (map #(+ (* mult %) %1) ("direction" evar) pos))
  (repeat #(dl.util.fire pos tar "7.62x51_fedarm_m62_147gr_red_tracer_cr-762-tr" (* mult 10)) 50)
  (map #(dl.util.explosion % "F1") (disperse-times 5 5 tar)))

(function shoot player
  (if (var evar (str "dl.players." player)
           mult (zeros player))
      (shoot-proyectile evar mult)
      (dl.util.fmessage "zero your weapon first!")))

(function zero player distance
  (var! zeros (assoc player distance)))

(function plant player
  (dl.util.fmessage "planting... (10s until activation)")
  (let pos ("position" (str "dl.players." player)))
  (wait 10)
  (var! claymores (append pos)))

(function abs3 p1 p2
  (sqrt (.. + (map #(** (- %1 %) 2) p1 p2))))
(function near-sub10 p1
  (0 (filter #(>= 10 (abs3 p1 %)) claymores)))

(function on-tick
  (map #(when (let nearclaymore (near-sub10 %)) (dl.util.explosion nearclaymore "F1"))  (map #("position" (str "dl.players." %)) (filter #((str "dl.players." % ".is_alive")) (dl.list_players)))))
(ticked.connect on-tick)

(function mark acron sender
  (unless acron (do (dl.util.fmessage "provide an acronym") (return)))
  (var! marked-posits (assoc acron (eval (str "$dl.players." sender ".position")))))

(var to-digit {"0" "z*r*" "1" "*n*" "2" "tw**" "3" "thr**" "4" "f**r" "5" "f*v*" "6" "s*x" "7" "s*v*n" "8" "**ght" "9" "n*n*" "-" "minus"}
     censor #(-> % (map #(-> % round str (map to-digit) (join " "))) (join ",\n")))

(function reveal sender _acron
  (dl.util.fmessage (censor (if _acron (marked-posits _acron) (eval (str "$dl.players." sender ".position"))))))

(function disperse-times t dispers vec3 
  (repeat (map + (repeat #(rand (-  dispers) dispers) 3) vec3) t))

(function drone acron drone-name
  (if (let pos (if acron (marked-posits acron) (dl.drone.get_position drone-name)))
      (-> pos
          @(disperse-times 5 5)
          (map @(disperse-times 10 50))
          (map (fn vecs3 (wait .25) (map #(dl.util.explosion % "F1") vecs3))))
      (dl.util.fmessage "uknown mark")))

(function fill-ammo who
    ((str "dl.players." who ".fill_ammo") "primary")
    ((str "dl.players." who ".fill_ammo") "secondary"))
(function heal who
    ((str "$dl.players." who ".health") 120))

(function f-on-who? f who me
    (if who (f who)
            (f me)))

(function GET player acron where
  (let [weapon code] (set-ups acron))
  ((str "dl.players." player ".set_player_weapon") where weapon (dl.util.read_setup code)))

(function support verb who/acron where sender
    (match verb
           "fill" (f-on-who? fill-ammo who/acron sender)
           "heal" (f-on-who? heal who/acron sender)
           "get"  (GET sender who/acron where)))
(function grenadier verb distance sender
    (match verb
           "shoot"    (shoot sender)
           "aim"      (zero sender (to-num distance))
           "plant"    (plant sender)))
(function squad-leader verb acron sender
    (match verb
           "spawn"   (dl.drone.new sender (map + [0 50 0] ("position" (str "dl.players." sender))))
           "go"      (dl.drone.set_target_position sender (map + [(rand -100 100) 50 (rand -100 100)] ("position" (str "dl.players." acron))))
           "mark"    (mark acron sender)
           "reveal"  (reveal sender acron)
           "drone"   (drone acron sender)))

(function on-message sender _ msg
    (when (starts? prefix msg)
          (let [verb subj where] (split " "(sect msg (len prefix))))
          (when (= verb "role") (return (change-role sender subj)))
          (when (= verb "help") (return (dl.util.fmessage (help subj))))
          (match (player-roles sender)
                 "support"      (support verb subj where sender)
                 "grenadier"    (grenadier verb subj sender)
                 "squad-leader" (squad-leader verb subj sender))))
(dl.events.on_chat_message.connect on-message)
(dl.util.fmessage "/help")
